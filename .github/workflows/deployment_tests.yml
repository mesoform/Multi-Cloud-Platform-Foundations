name: 'Deployment Tests'

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - develop
  workflow_dispatch:
    inputs:
      action:
        required: true
        description: What terraform action to perform
        default: 'plan'
        options:
         - plan
         - deploy

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  deployment-test-plans:
    runs-on: ubuntu-latest
    name: Deployment Test Plans
    if: github.event_name != 'push' || github.event.inputs.action == 'plan'
    env:
      working-directory: ./tests/gcp/deployment
      DATE: $(date +%m%d%H%M)

    defaults:
      run:
        shell: bash
        working-directory: ${{env.working-directory}}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
#        with:
#          terraform_wrapper: false

      # Install gcloud sdk and set the service account
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          service_account: ${{secrets.GCP_SA_EMAIL}}
          workload_identity_provider: ${{secrets.GCP_WORKLOAD_IDENTITY_PROVIDER}}
          token_format: 'access_token'
          access_token_lifetime: 1200s # 20 minutes

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Set constant variables
        id: vars
        run: echo "::set-output name=DATE::${{ env.DATE }}"

      # Deploy google folders
      - name: Add IDs to GCP Folder Files
        run: |
          cd google_folder/resource
          sed -i "s/<folder_id>/folders\/${{secrets.GCP_FOLDER_ID}}/g" folders.yaml
          sed -i "s/<service_account>/${{secrets.GCP_SA_EMAIL}}/g"  folders.yaml
          cat folders.yaml

      - name: Add IDs to GCP Project Files
        run: |
          cd google_project/resource
          sed -i "s/<project_date>/${{ steps.vars.outputs.DATE }}/g" projects.yaml
          sed -i "s/<folder_id>/folders\/${{secrets.GCP_FOLDER_ID}}/g" projects.yaml
          sed -i "s/<billing_account>/${{secrets.GCP_BILLING_ID}}/g" projects.yaml
          sed -i "s/<service_account>/${{secrets.GCP_SA_EMAIL}}/g"  projects.yaml
          cat projects.yaml

      # Deploy google service accounts
      - name: Add IDs to GCP Service Accounts File
        run: |
          cd google_service_account/resource
          sed -i "s/<project_id>/mcp-test-project-${{ steps.vars.outputs.DATE }}/g" service_accounts.yaml
          sed -i "s/<user_email>/${{secrets.GCP_USER}}/g" service_accounts.yaml
          cat service_accounts.yaml


      - name: Google folder terraform plan
        run: |
          cd google_folder
          terraform init
          terraform validate
          terraform plan 


      - name: Google project terraform plan
        run: |
          cd google_project
          terraform init
          terraform validate
          terraform plan 

#      - name: Google service accounts terraform plan
#        run: |
#          cd google_service_account
#          terraform init
#          terraform validate
#          terraform plan
#
#      - name: Deploy GKE clusters
#        env:
#          TF_VAR_project_id: mcp-test-project-${{ steps.vars.outputs.DATE }}
#        run: |
#          cd gke
#          terraform init
#          terraform validate
#          terraform plan

  ############################# Deployment Tests for GCP modules #####################################################
  deployment-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.action == 'deploy'
    name: Deployment Tests
    env:
      working-directory: ./tests/gcp/deployment
      DATE: $(date +%m%d%H%M)

    defaults:
      run:
        shell: bash
        working-directory: ${{env.working-directory}}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Install gcloud sdk and set the service account
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          service_account: ${{secrets.GCP_SA_EMAIL}}
          workload_identity_provider: ${{secrets.GCP_WORKLOAD_IDENTITY_PROVIDER}}
          token_format: 'access_token'
          access_token_lifetime: 1200s # 20 minutes

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Set constant variables
        id: vars
        run: echo "::set-output name=DATE::${{ env.DATE }}"

      # Set current date
      - name: Set current date as env variable
        run: echo "DATE=$(date +%y%m%d%H%M)" >> $GITHUB_ENV

      # Deploy google folders
      - name: Add IDs to GCP Folder Files
        run: |
          cd google_folder/resource
          sed -i "s/<folder_id>/folders\/${{secrets.GCP_FOLDER_ID}}/g" folders.yaml
          sed -i "s/<service_account>/${{secrets.GCP_SA_EMAIL}}/g"  folders.yaml
          cat folders.yaml

      - name: Deploy Google folder
        id: deploy-folders
        run: |
          cd google_folder
          terraform init
          terraform plan -out="./plan.tfplan"
          terraform apply plan.tfplan

      - name: Destroy Google Folders
        if: always()
        run: |
          cd google_folder
          terraform destroy -auto-approve
      

      # Deploy google projects
      - name: Add IDs to GCP Project Files
        run: |
          cd google_project/resource
          sed -i "s/<project_date>/${{ steps.vars.outputs.DATE }}/g" projects.yaml
          sed -i "s/<folder_id>/folders\/${{secrets.GCP_FOLDER_ID}}/g" projects.yaml
          sed -i "s/<billing_account>/${{secrets.GCP_BILLING_ID}}/g" projects.yaml
          sed -i "s/<service_account>/${{secrets.GCP_SA_EMAIL}}/g" projects.yaml
          cat projects.yaml

      - name: Deploy Google project
        id: deploy-projects
        run: |
          cd google_project
          terraform init
          terraform plan -out="./plan.tfplan"
          terraform apply plan.tfplan

      # Deploy google service accounts
      - name: Add IDs to GCP Service Accounts File
        run: |
          cd google_service_account/resource
          sed -i "s/<project_id>/mcp-test-project-${{ steps.vars.outputs.DATE }}/g" service_accounts.yaml
          sed -i "s/<user_email>/${{secrets.GCP_USER}}/g" service_accounts.yaml
          cat service_accounts.yaml
          

      - name: Deploy Google service accounts
        id: deploy-GSAs
        run: |
          cd google_service_account
          terraform init
          terraform plan -out="./plan.tfplan"
          terraform apply plan.tfplan

      - name: Deploy GKE clusters
        id : deploy-gke
        env:
          TF_VAR_project_id: mcp-test-project-${{ steps.vars.outputs.DATE }}
        run: |
          cd gke
          sleep 3m
          terraform init
          terraform plan -out="./plan.tfplan"
          terraform apply plan.tfplan

      - name: Destroy GKE clusters
        if: always()
        env:
          TF_VAR_project_id: mcp-test-project-${{ steps.vars.outputs.DATE }}
        run: |
          cd gke
          terraform destroy -auto-approve

      - name: Destroy Google Service Accounts
        if: always()
        run: |
          cd google_service_account
          terraform destroy -auto-approve

      - name: Destroy Google Projects
        if: always()
        run: |
          cd google_project
          terraform destroy -auto-approve
